Función reiniciar juego


Bueno, Leo, ¿qué te parece si implementamos nuestro botón de Nuevo Juego? Perfecto, vamos a ello. Recordemos que cuando el botón es presionado, responde a un evento. Por lo tanto, vamos a definir que al hacer clic, se llame a una función. Para esto, en el botón, usamos la gestión de eventos, en este caso, On. Siempre se muestran los eventos. Podemos ver que hay muchos eventos disponibles. Estamos utilizando solo algunos, pero es importante tener en cuenta que son numerosos, ¿no? Hacemos uso del OnClick y llamamos a una función llamada reiniciarJuego. Aún no tenemos esta función, pero ya la estamos invocando. La estamos invocando sabiendo que debemos construirla.

Entonces, vamos a construir esta función reiniciarJuego. Para ello, en nuestro código, vamos al final, antes de hacer uso de las demás llamadas, y siguiendo la anatomía de las funciones, tenemos que definir ese nombre que ya está definido, en este caso, reiniciarJuego, y por ahora no tiene parámetros. A medida que implementamos, si es necesario, podemos hacer uso de los parámetros.

Entonces, ¿qué será esa función reiniciarJuego? Lo que tenemos que hacer es limpiar la caja de texto. Te voy a pedir, Leo, que vayamos escribiendo comentarios, porque parece que esta función va a hacer muchas cosas. Para organizar nuestras ideas, vamos a colocar esas actividades en comentarios. Entonces, necesitamos limpiar la caja de texto. ¿Por qué? Porque ¿qué es reiniciarJuego? Pensemos juntos. Necesitamos reiniciar todo desde cero, como si hubiéramos presionado el F5 para reiniciar nuestro sistema.

Entonces, recogiendo lo que comentaste, guardé los archivos y veremos cómo está el juego al inicio. Vamos a cerrar esto y veremos que la caja de texto está vacía. Entonces, si había algo, debemos limpiarlo. Observamos que tenemos el mensaje de indicar un número del 1 al 10. Entonces, es importante indicar el mensaje de inicio y el rango de números. Además, necesito generar el número aleatorio nuevamente. Un detalle importante es que necesito deshabilitar el botón Nuevo Juego. Porque solo se habilita cuando el juego termina. Ah, y los intentos. Necesitamos reiniciar el número de intentos. Hay mucho que hacer aquí.

Entonces, creo que este ejercicio fue importante para decir que sí, una función puede hacer varias acciones. En última instancia, la acción principal, el objetivo, es reiniciar el juego. Pero para reiniciar el juego, necesitamos realizar esta serie de actividades.

Entonces, vamos a ello. Lo primero que haremos es limpiar la caja de texto. Entonces, llamamos a la función limpiarCaja, que ya tenemos hecha. Luego, indicaremos el rango de números. En este caso, tenemos esta llamada aquí, que es exactamente eso. Entonces, voy a hacer algo aquí que no es recomendable. Hice copiar y pegar. Y eso ya nos hace pensar. ¿Qué tal si esos dos mensajes que están allí, los colocamos en una función? Me parece buena idea, pero creo que por separado.

Entonces, vamos a hacer una función aquí, que se llame funcionMensajesIniciales. No va a recibir parámetros. Y estas dos líneas, que están aquí, las traemos a esta función. De esta forma, estamos encapsulando la actividad de colocar los mensajes. ¿Qué mensajes? Nuestro título y el rango. Entonces, en lugar de llamarlas aquí afuera, llamaremos a funcionMensajesIniciales afuera.

Cuando reiniciemos el juego, también llamaremos a los mensajes iniciales. Perfecto. Aún nos falta generar el numerador nuevamente. Tenemos una función para eso. Sí, tenemos esta función. Entonces, vamos a usar esta función aquí para cambiarla. Podemos hacerlo sin problema por ahora. Solo que sin el let, ya que no estamos declarando nuevamente el número secreto. No lo eliminaste arriba, solo lo dejaste en esta función. Entonces, la declaración de la variable se mantiene al inicio y aquí solo estamos invocando una nueva llamada a la función.

Deshabilitar el botón del nuevo juego es una tarea más sencilla, por lo que cambiaré el orden de las tareas. Inicializamos el número de intentos, estableciendo que intentos es igual a 1. Creo que podríamos colocar estas dos llamadas en la función de mensajes iniciales. Pero entonces tendríamos que cambiar el nombre de la función. En lugar de mensajes iniciales, serían condiciones iniciales. Esto es muy común, a medida que vamos entendiendo cuál es la mejor estructura para nuestra función. Las cosas van cambiando, los nombres y las estructuras van cambiando. Por eso es importante siempre revisar su código y preguntarse qué más se puede mejorar.

Entonces, en este caso, nombramos a la función condiciones iniciales. Llamamos a esta función aquí, que realizará estas tres actividades. Indicará los mensajes en el numerador y finalizará con el número de intentos en 1 nuevamente. Entonces deberíamos llamar a condiciones iniciales. Y ya no tiene sentido nuestra declaración inicial a la llamada del número aleatorio. Solo tiene sentido declarar la variable al inicio. Solo que luego le asignamos un nuevo valor. Por lo tanto, necesita estar arriba para que se declare la variable. Podría dejarle número secreto y cualquier número en este momento.

Lo que podemos hacer es dejarlo de esta forma, sin valor asignado. No me gusta mucho asignar sin valor, como te dije en el curso anterior. Incluso voy a colocar 0 aquí. Las condiciones iniciales le darán el valor correcto. Aquí es donde vamos a generar el número y los intentos vuelven a ser 1. Creo que es más fácil de entender cuando otra persona ve nuestro código.

Entonces, si quieres, antes de soltar el número, vamos a probar. Vamos a colocar un número cualquiera. 6, menor, 4, menor, 2, mayor, 3. Ok, en 4 intentos. ¿Qué pasa si iniciamos un nuevo juego? ¿Qué debería pasar ahora? Todas las condiciones iniciales deberían activarse nuevamente. Le dimos clic, se limpió la caja y se mostró el mensaje. En este caso, el número que usamos fue 4 o fue el que la máquina eligió. Puede ser que sea 4 nuevamente, no hay garantía de ello. Eso puede ser un punto de mejora.

Vamos a colocar 7, es menor, 5 es menor, 4 es menor. No fue el mismo número. Reinicio el número. Reinicio el número. 3. Ok. Perfecto. Ahora nos falta finalizar para dejar el botón también deshabilitado nuevamente. Porque en el primer juego lo habilitamos y se quedó habilitado. Entonces, en cualquier momento puedo reiniciar el juego, lo que no es correcto. Por lo tanto, para finalizar esta parte, vamos a asignarle el atributo nuevamente. Usamos removeAttribute para quitar el atributo.

Existe una función contraria que es setAttribute para asignar. Entonces, document.querySelector para seleccionar el botón. Este botón tiene un ID. Por lo tanto, para reforzar, usamos el símbolo numeral porque es un ID. Le indicamos reiniciar. Luego, presionamos aquí setAttribute. Es la función que debemos utilizar. ¿Qué espera? En este caso, espera dos parámetros. A diferencia del remove. El remove, cuando lo usamos, quitamos y mencionamos solo el nombre. Quita esto. Ahora, cuando asignamos, tenemos que decir, asigna esto con tal valor. Por eso son dos parámetros. En este caso, es disableTrue. Perfecto. Entonces, estamos estableciendo, no set, estableciendo un atributo. Ese atributo es disable. Y quiero establecer ese atributo disable con el valor true. Tal cual.

Ahora vamos a probar. Intentamos. Es mayor. Es 7, 2. Nuevo juego. Y permanece deshabilitado. Y quedó en las condiciones iniciales de manera perfecta. Excelente. Con toda esta implementación de código que hicimos, estas mejoras, prácticamente ya tenemos un juego súper funcional. Le hemos dado un aspecto mucho más profesional porque tenemos un botón para reiniciar el juego. No necesitamos salir, no necesitamos estar presionando F5 para reiniciar nuestro juego. Y todas las condiciones iniciales se reinician al momento de presionar el botón.

Estoy disfrutando bastante, Leo. Creo que hay algunos puntos que podemos seguir mejorando. Pero, ¿qué te parece si son asuntos para las próximas clases? Sigamos, entonces. OK. Adiós, adiós.